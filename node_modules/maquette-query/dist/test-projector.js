(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "./simulator"], factory);
    }
})(function (require, exports) {
    "use strict";
    var simulator_1 = require("./simulator");
    // Helper functions
    // ----------------
    var makeSelectorFunction = function (selector) {
        if (typeof selector === 'string') {
            return function (vNode) {
                var index = vNode.vnodeSelector.indexOf(selector);
                if ((selector[0] === '.' || selector[0] === '#') ? (index > 0) : (index === 0)) {
                    var nextChar = vNode.vnodeSelector.charAt(index + selector.length);
                    return !nextChar || nextChar === '.' || nextChar === '#';
                }
                return false;
            };
        }
        else if (typeof selector === 'function') {
            return selector;
        }
        else {
            throw new Error('Invalid selector ' + selector);
        }
    };
    var filterDescendants = function (root, predicate) {
        var results = [];
        var visit = function (vnodeTree) {
            if (vnodeTree.children) {
                vnodeTree.children.forEach(function (child) {
                    if (predicate(child)) {
                        results.push(child);
                    }
                    visit(child);
                });
            }
        };
        if (root) {
            visit(root);
        }
        return results;
    };
    var collectTextContent = function (vnodeTree, results) {
        if (vnodeTree.vnodeSelector === '') {
            results.push(vnodeTree.text);
        }
        else {
            if (vnodeTree.text) {
                results.push(vnodeTree.text);
            }
            if (vnodeTree.children) {
                vnodeTree.children.forEach(function (child) {
                    collectTextContent(child, results);
                });
            }
        }
        return results;
    };
    // The create methods
    var createCollectionQuery;
    var createQuery = function (getVNode, getDebugInfo) {
        var query = function (selector, fakeDomNode) {
            var predicate = makeSelectorFunction(selector);
            return createQuery(function () { return filterDescendants(getVNode(), predicate)[0]; }, function () { return getDebugInfo().concat([selector]); });
        };
        var queryAll = function (selector) {
            var predicate = makeSelectorFunction(selector);
            return createCollectionQuery(function () { return filterDescendants(getVNode(), predicate); }, function () { return getDebugInfo().concat([selector]); });
        };
        var getResult = function () {
            var result = getVNode();
            if (!result) {
                throw new Error('Query did not match a VNode: ' + JSON.stringify(getDebugInfo(), undefined, 2));
            }
            return result;
        };
        var targetDomNode;
        return {
            debug: function () { return JSON.stringify(getDebugInfo()); },
            execute: getResult,
            exists: function () { return !!getVNode(); },
            query: query,
            queryAll: queryAll,
            get textContent() {
                return collectTextContent(getResult(), []).join('');
            },
            get vnodeSelector() {
                return getResult().vnodeSelector;
            },
            get properties() {
                return getResult().properties || {};
            },
            get children() {
                return getResult().children || [];
            },
            getChild: function (index) {
                return createQuery(function () {
                    return getResult().children[index];
                }, function () { return getDebugInfo().concat(['child:' + index]); });
            },
            /**
             * A small facade that allows firing of simple events and sequences of events for common usecases.
             * It is not meant to be exhaustive.
             * If you need to simulate something that is not in here, you can simply invoke query(...).properties.on???() yourself.
             */
            get simulate() { return simulator_1.createSimulator(getResult(), targetDomNode); },
            setTargetDomNode: function (target) {
                targetDomNode = target;
            },
            getTargetDomNode: function () {
                return targetDomNode;
            }
        };
    };
    createCollectionQuery = function (getVNodes, getDebugInfo) {
        return {
            execute: getVNodes,
            getResult: function (index) {
                return createQuery(function () {
                    return getVNodes()[index];
                }, function () { return getDebugInfo().concat(['result:' + index]); });
            },
            get length() {
                return getVNodes().length;
            }
        };
    };
    /**
     * Creates a test projector which implements the QueryBase interface
     * @param renderMaquetteFunction  Optional, the renderMaquette function that is used to produce the VNode tree.
     *                                when not specified, you must use the initialize function to supply the renderMaquetteFunction.
     */
    exports.createTestProjector = function (renderMaquetteFunction) {
        var getRootVNode = function () {
            if (!renderMaquetteFunction) {
                throw new Error('TestProjector is not initialized');
            }
            return renderMaquetteFunction();
        };
        var createQueryStart = createQuery(function () {
            return {
                children: [getRootVNode()]
            };
        }, function () { return [getRootVNode()]; });
        return {
            initialize: function (initializeRenderMaquetteFunction) {
                renderMaquetteFunction = initializeRenderMaquetteFunction;
            },
            uninitialize: function () {
                renderMaquetteFunction = undefined;
            },
            root: createQuery(getRootVNode, function () { return [getRootVNode()]; }),
            query: createQueryStart.query,
            queryAll: createQueryStart.queryAll
        };
    };
});

//# sourceMappingURL=test-projector.js.map
