(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports"], factory);
    }
})(function (require, exports) {
    "use strict";
    var createEvent = function (target) {
        var result = {
            defaultPrevented: false,
            propagationStopped: false,
            preventDefault: function () {
                result.defaultPrevented = true;
            },
            stopPropagation: function () {
                result.propagationStopped = true;
            },
            target: target,
            currentTarget: target
        };
        return result;
    };
    var createKeyEvent = function (which, target) {
        var event = createEvent(target);
        event.which = which;
        event.keyCode = which;
        return event;
    };
    var createMouseEvent = function (target, parameters) {
        var event = createEvent(target);
        if (parameters) {
            Object.keys(parameters).forEach(function (param) { event[param] = parameters[param]; });
        }
        return event;
    };
    var createFocusEvent = function (target) {
        return createEvent(target);
    };
    var getKeyCode = function (keyCodeOrChar) {
        return typeof keyCodeOrChar === 'number' ? keyCodeOrChar : keyCodeOrChar.charCodeAt(0);
    };
    exports.createSimulator = function (vnode, defaultFakeDomNode) {
        var properties = vnode.properties;
        return {
            keyDown: function (keyCode, fakeDomNode) {
                var event = createKeyEvent(getKeyCode(keyCode), fakeDomNode || defaultFakeDomNode);
                properties.onkeydown(event);
                return event;
            },
            keyUp: function (keyCode, fakeDomNode) {
                var event = createKeyEvent(getKeyCode(keyCode), fakeDomNode || defaultFakeDomNode);
                properties.onkeyup(event);
                return event;
            },
            mouseDown: function (fakeDomNode, parameters) {
                var event = createMouseEvent(fakeDomNode || defaultFakeDomNode, parameters);
                properties.onmousedown(event);
                return event;
            },
            mouseUp: function (fakeDomNode, parameters) {
                var event = createMouseEvent(fakeDomNode || defaultFakeDomNode, parameters);
                properties.onmouseup(event);
                return event;
            },
            mouseOver: function (fakeDomNode, parameters) {
                var event = createMouseEvent(fakeDomNode || defaultFakeDomNode, parameters);
                properties.onmouseover(event);
                return event;
            },
            mouseOut: function (fakeDomNode, parameters) {
                var event = createMouseEvent(fakeDomNode || defaultFakeDomNode, parameters);
                properties.onmouseout(event);
                return event;
            },
            click: function (fakeDomNode, parameters) {
                var event = createMouseEvent(fakeDomNode || defaultFakeDomNode, parameters);
                properties.onclick(event);
                return event;
            },
            input: function (fakeDomNode) {
                var event = createEvent(fakeDomNode || defaultFakeDomNode);
                properties.oninput(event);
                return event;
            },
            change: function (fakeDomNode) {
                var event = createEvent(fakeDomNode || defaultFakeDomNode);
                properties.onchange(event);
                return event;
            },
            focus: function (fakeDomNode) {
                var event = createFocusEvent(fakeDomNode || defaultFakeDomNode);
                properties.onfocus(event);
                return event;
            },
            blur: function (fakeDomNode) {
                var event = createFocusEvent(fakeDomNode || defaultFakeDomNode);
                properties.onblur(event);
                return event;
            },
            keyPress: function (keyCodeOrChar, valueBefore, valueAfter, fakeDomNode) {
                var target = (fakeDomNode || defaultFakeDomNode || {});
                var keyCode = typeof keyCodeOrChar === 'number' ? keyCodeOrChar : keyCodeOrChar.charCodeAt(0);
                target.value = valueBefore;
                var keyDownEvent = createKeyEvent(keyCode, target);
                if (properties.onkeydown) {
                    properties.onkeydown(keyDownEvent);
                }
                if (!keyDownEvent.defaultPrevented) {
                    target.value = valueAfter;
                    if (properties.oninput) {
                        properties.oninput(createEvent(target));
                    }
                }
                if (properties.onkeyup) {
                    properties.onkeyup(createKeyEvent(keyCode, target));
                }
            },
            mouseWheel: function (deltas, fakeDomNode) {
                var event = createEvent(fakeDomNode || defaultFakeDomNode);
                event.deltaX = deltas.deltaX;
                event.deltaY = deltas.deltaY;
                properties.onmousewheel(event);
                return event;
            }
        };
    };
});

//# sourceMappingURL=simulator.js.map
